{"version":3,"sources":["constants/paths.js","modules/notification/components/useNotifications.js","modules/notification/actionTypes.js","utils/components.js","containers/Navbar/AccountMenu.js","containers/Navbar/Navbar.js","containers/Navbar/Navbar.styles.js","containers/Navbar/index.js","layouts/CoreLayout/CoreLayout.js","layouts/CoreLayout/CoreLayout.styles.js","layouts/CoreLayout/index.js","routes/Home/components/HomePage/HomePage.js","routes/Home/components/HomePage/HomePage.styles.js","routes/Home/index.js","routes/Login/index.js","routes/Signup/index.js","routes/Projects/index.js","routes/Account/index.js","routes/NotFound/index.js","routes/index.js","store/location.js","store/reducers.js","config.js","containers/App/App.js","theme.js","containers/App/index.js","index.js","store/createStore.js","modules/notification/actions.js","components/LoadingSpinner/LoadingSpinner.js","components/LoadingSpinner/LoadingSpinner.styles.js","components/LoadingSpinner/index.js","modules/notification/reducer.js","modules/notification/components/Notifications.js","modules/notification/index.js"],"names":["LIST_PATH","ACCOUNT_PATH","LOGIN_PATH","SIGNUP_PATH","useNotifications","dispatch","useDispatch","useMemo","bindActionCreators","actions","NOTIFICATION_SHOW","NOTIFICATION_DISMISS","NOTIFICATION_CLEAR","Loadable","opts","LoadableComponent","loading","LoadingSpinner","useStyles","makeStyles","buttonRoot","color","AccountMenu","classes","useState","anchorEl","setMenu","history","useHistory","firebase","useFirebase","closeAccountMenu","e","IconButton","aria-owns","aria-haspopup","onClick","target","root","Menu","id","anchorOrigin","vertical","horizontal","transformOrigin","open","Boolean","onClose","MenuItem","push","logout","then","flex","flexGrow","appBar","signIn","textDecoration","alignSelf","Navbar","auth","useSelector","state","authExists","isLoaded","isEmpty","AppBar","position","className","Toolbar","Typography","variant","component","Link","to","brand","data-test","Button","theme","CoreLayout","children","container","reactRouterUrl","flexColumnCenter","section","Home","path","href","rel","loader","createRoutes","store","exact","AccountRoute","ProjectsRoute","SignupRoute","LoginRoute","map","settings","index","key","NotFoundRoute","locationReducer","action","type","payload","makeRootReducer","asyncReducers","combineReducers","form","notifications","location","apiKey","authDomain","databaseURL","projectId","storageBucket","reduxFirebase","enableLogging","createMuiTheme","palette","primary","main","typography","useNextVariants","display","flexDirection","alignItems","flexRowCenter","justifyContent","initializeApp","fbConfig","App","routes","config","rfConfig","createFirestoreInstance","window","version","env","initialState","enhancers","hostname","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","middleware","thunk","withExtraArgument","getFirebase","createStore","compose","applyMiddleware","___INITIAL_STATE__","authError","require","ReactDOM","render","document","getElementById","showNotification","notif","Object","assign","Date","now","setTimeout","dismissAfter","showSuccess","message","showError","dismissNotification","clearNotifications","paddingTop","height","progress","size","CircularProgress","mode","notification","byId","omit","allIds","without","connect","keys","length","Snackbar"],"mappings":"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","file":"static/js/main.d3e5df92.chunk.js","sourcesContent":["export const LIST_PATH = '/projects'\nexport const ACCOUNT_PATH = '/account'\nexport const LOGIN_PATH = '/login'\nexport const SIGNUP_PATH = '/signup'\n","import { useMemo } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport * as actions from '../actions'\n\nexport default function useNotifications() {\n  const dispatch = useDispatch()\n  return useMemo(() => {\n    return bindActionCreators(actions, dispatch)\n  }, [dispatch])\n}","export const NOTIFICATION_SHOW = 'NOTIFICATION_SHOW'\nexport const NOTIFICATION_DISMISS = 'NOTIFICATION_DISMISS'\nexport const NOTIFICATION_CLEAR = 'NOTIFICATION_CLEAR'\n","import { get, pick } from 'lodash'\nimport { isLoaded, isEmpty } from 'react-redux-firebase'\nimport LoadableComponent from 'react-loadable'\nimport { mapProps, branch, renderComponent } from 'recompose'\nimport LoadingSpinner from 'components/LoadingSpinner'\n\n/**\n * Show a loading spinner when a condition is truthy. Used within\n * spinnerWhileLoading. Accepts a test function and a higher-order component.\n * @param {Function} condition - Condition function for when to show spinner\n * @returns {HigherOrderComponent}\n */\nexport function spinnerWhile(condition) {\n  return branch(condition, renderComponent(LoadingSpinner))\n}\n\n/**\n * Show a loading spinner while props are loading . Checks\n * for undefined, null, or a value (as well as handling `auth.isLoaded` and\n * `profile.isLoaded`). **NOTE:** Meant to be used with props which are passed\n * as props from state.firebase using connect (from react-redux), which means\n * it could have unexpected results for other props\n * @param {Array} propNames - List of prop names to check loading for\n * @returns {HigherOrderComponent}\n * @example <caption>Spinner While Data Loading</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(() => ['projects']),\n *   connect(({ firebase: { data: { projects } } }) => ({ projects })),\n *   spinnerWhileLoading(['projects'])\n * )\n *\n * export default enhance(SomeComponent)\n */\nexport function spinnerWhileLoading(propNames) {\n  if (!propNames || !Array.isArray(propNames)) {\n    const missingPropNamesErrMsg =\n      'spinnerWhileLoading requires propNames array'\n    console.error(missingPropNamesErrMsg) // eslint-disable-line no-console\n    throw new Error(missingPropNamesErrMsg)\n  }\n  return spinnerWhile(props =>\n    propNames.some(name => !isLoaded(get(props, name)))\n  )\n}\n\n/**\n * HOC that shows a component while condition is true\n * @param {Function} condition - function which returns a boolean indicating\n * whether to render the provided component or not\n * @param {React.Component} component - React component to render if condition\n * is true\n * @returns {HigherOrderComponent}\n */\nexport function renderWhile(condition, component) {\n  return branch(condition, renderComponent(component))\n}\n\n/**\n * HOC that shows a component while any of a list of props loaded from Firebase\n * is empty (uses react-redux-firebase's isEmpty).\n * @param {Array} propNames - List of prop names to check loading for\n * @param {React.Component} component - React component to render if prop loaded\n * from Firebase is empty\n * @returns {HigherOrderComponent}\n * @example\n * renderWhileEmpty(['todos'], () => <div>Todos Not Found</div>),\n */\nexport function renderWhileEmpty(propNames, component) {\n  if (!propNames || !Array.isArray(propNames)) {\n    const missingPropNamesErrMsg = 'renderWhileEmpty requires propNames array'\n    console.error(missingPropNamesErrMsg) // eslint-disable-line no-console\n    throw new Error(missingPropNamesErrMsg)\n  }\n  return renderWhile(\n    // Any of the listed prop name correspond to empty props (supporting dot path names)\n    props =>\n      propNames.some(propNames, name => {\n        const propValue = get(props, name)\n        return (\n          isLoaded(propValue) &&\n          (isEmpty(propValue) ||\n            (Array.isArray(propValue) && !Object.keys(propValue).length))\n        )\n      }),\n    component\n  )\n}\n\n/**\n * HOC that logs props using console.log. Accepts an array list of prop names\n * to log, if none provided all props are logged. **NOTE:** Only props at\n * available to the HOC will be logged.\n * @param {Array} propNames - List of prop names to log. If none provided, all\n * are logged\n * @returns {HigherOrderComponent}\n * @example <caption>Log Single Prop</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import firebaseConnect from 'react-redux-firebase/lib/firebaseConnect'\n *\n * const enhance = compose(\n *   withProps(() => ({ projectName: 'test' })),\n *   logProps(['projectName']) // 'test' would be logged to console when SomeComponent is rendered\n * )\n *\n * export default enhance(SomeComponent)\n */\nexport function logProps(propNames, logName = '') {\n  return mapProps(ownerProps => {\n    /* eslint-disable no-console */\n    console.log(\n      `${logName} props:`,\n      propNames ? pick(ownerProps, propNames) : ownerProps\n    )\n    /* eslint-enable no-console */\n    return ownerProps\n  })\n}\n\n/**\n * Create component which is loaded async, showing a loading spinner\n * in the meantime.\n * @param {object} opts - Loading options\n * @param {Function} opts.loader - Loader function (should return import promise)\n * @returns {React.Component}\n */\nexport function Loadable(opts) {\n  return LoadableComponent({\n    loading: LoadingSpinner,\n    ...opts\n  })\n}\n","import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useFirebase } from 'react-redux-firebase'\nimport { useHistory } from 'react-router-dom'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport IconButton from '@material-ui/core/IconButton'\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { ACCOUNT_PATH } from 'constants/paths'\n\nconst useStyles = makeStyles(() => ({\n  buttonRoot: {\n    color: 'white'\n  }\n}))\n\nfunction AccountMenu() {\n  const classes = useStyles()\n  const [anchorEl, setMenu] = useState(null)\n  const history = useHistory()\n  const firebase = useFirebase()\n\n  function closeAccountMenu(e) {\n    setMenu(null)\n  }\n  function handleMenu(e) {\n    setMenu(e.target)\n  }\n  function handleLogout() {\n    return firebase.logout().then(() => {\n      closeAccountMenu()\n      history.push('/')\n    })\n  }\n  function goToAccount() {\n    closeAccountMenu()\n    history.push(ACCOUNT_PATH)\n  }\n\n  return (\n    <Fragment>\n      <IconButton\n        aria-owns={anchorEl ? 'menu-appbar' : null}\n        aria-haspopup=\"true\"\n        onClick={handleMenu}\n        classes={{ root: classes.buttonRoot }}>\n        <AccountCircle />\n      </IconButton>\n      <Menu\n        id=\"menu-appbar\"\n        anchorEl={anchorEl}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        open={Boolean(anchorEl)}\n        onClose={closeAccountMenu}>\n        <MenuItem onClick={goToAccount}>Account</MenuItem>\n        <MenuItem onClick={handleLogout}>Sign Out</MenuItem>\n      </Menu>\n    </Fragment>\n  )\n}\n\nAccountMenu.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired // from enhancer (withRouter)\n  }),\n  firebase: PropTypes.shape({\n    logout: PropTypes.func.isRequired // from enhancer (withFirebase)\n  })\n}\n\nexport default AccountMenu\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useSelector } from \"react-redux\";\nimport { isLoaded, isEmpty } from \"react-redux-firebase\";\nimport { LIST_PATH, LOGIN_PATH } from \"constants/paths\";\nimport AccountMenu from \"./AccountMenu\";\nimport styles from \"./Navbar.styles\";\n\nconst useStyles = makeStyles(styles);\n\nfunction Navbar() {\n  const classes = useStyles();\n\n  // Get auth from redux state\n  const auth = useSelector((state) => state.firebase.auth);\n  const authExists = isLoaded(auth) && !isEmpty(auth);\n\n  return (\n    <AppBar position=\"static\" className={classes.appBar}>\n      <Toolbar>\n        <Typography\n          color=\"inherit\"\n          variant=\"h6\"\n          component={Link}\n          to={authExists ? LIST_PATH : \"/\"}\n          className={classes.brand}\n          data-test=\"brand\"\n        >\n          Puzzle Editor\n        </Typography>\n        <div className={classes.flex} />\n        {authExists ? (\n          <AccountMenu />\n        ) : (\n          <Button\n            className={classes.signIn}\n            component={Link}\n            to={LOGIN_PATH}\n            data-test=\"sign-in\"\n          >\n            Sign In\n          </Button>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Navbar;\n","export default () => ({\n  flex: {\n    flexGrow: 1\n  },\n  appBar: {\n    // backgroundColor: theme.palette.primary1Color // Update this to change navbar color\n  },\n  signIn: {\n    color: 'white',\n    textDecoration: 'none',\n    alignSelf: 'center'\n  }\n})\n","import Navbar from './Navbar'\n\nexport default Navbar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Navbar from 'containers/Navbar'\nimport { Notifications } from 'modules/notification'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from './CoreLayout.styles'\n\nconst useStyles = makeStyles(styles)\n\nfunction CoreLayout({ children }) {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.container}>\n      <Navbar />\n      <div className={classes.children}>{children}</div>\n      <Notifications />\n    </div>\n  )\n}\n\nCoreLayout.propTypes = {\n  children: PropTypes.element.isRequired\n}\n\nexport default CoreLayout\n","export default theme => ({})\n","import CoreLayout from './CoreLayout'\n\nexport default CoreLayout\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n  ACCOUNT_PATH,\n  LIST_PATH,\n  LOGIN_PATH,\n  SIGNUP_PATH\n} from 'constants/paths'\nimport styles from './HomePage.styles'\n\nconst authWrapperUrl = 'https://github.com/mjrussell/redux-auth-wrapper'\nconst reactRouterUrl = 'https://github.com/ReactTraining/react-router'\n\nconst useStyles = makeStyles(styles)\n\nfunction Home() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <div className=\"flex-row-center\">\n        <h2>Home Route</h2>\n      </div>\n      <div className=\"flex-row-center\">\n        <div className={classes.section}>\n          <h3>Routing</h3>\n          <span>\n            Redirecting and route protection done using:\n            <div>\n              <span>\n                <a\n                  href={reactRouterUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\">\n                  react-router\n                </a>\n              </span>\n              <span> and </span>\n              <a\n                href={authWrapperUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                redux-auth-wrapper\n              </a>\n            </div>\n          </span>\n        </div>\n        <div className={classes.section}>\n          <h4>Logged Out</h4>\n          <span>\n            User is redirected to <pre>/login</pre> if not authenticated and\n            trying to vist:\n          </span>\n          <ul>\n            <li>\n              <Link to={LIST_PATH}>Projects</Link>\n            </li>\n            <li>\n              <Link to={ACCOUNT_PATH}>Account</Link>\n            </li>\n          </ul>\n        </div>\n        <div className={classes.section}>\n          <h4>Logged In</h4>\n          <span>\n            User is redirected to <pre>/projects</pre> if authenticated and\n            trying to vist:\n          </span>\n          <ul>\n            <li>\n              <Link to={LOGIN_PATH}>Login</Link>\n            </li>\n            <li>\n              <Link to={SIGNUP_PATH}>Signup</Link>\n            </li>\n          </ul>\n        </div>\n        <div className={classes.section}>\n          <div>\n            <h4>Forms</h4>\n            <span>Redirecting and route protection done using:</span>\n            <div>\n              <span>\n                <a\n                  href={reactRouterUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\">\n                  redux-form\n                </a>\n              </span>\n            </div>\n          </div>\n          <span>The following routes use redux-form:</span>\n          <Link to={ACCOUNT_PATH}>\n            <p>Account Page</p>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","export default theme => ({\n  root: {\n    ...theme.flexColumnCenter\n  },\n  section: {\n    ...theme.flexColumnCenter\n  }\n})\n","import HomePage from './components/HomePage'\n\n// Sync route definition\nexport default {\n  path: '/',\n  component: HomePage\n}\n","import { Loadable } from 'utils/components'\nimport { LOGIN_PATH as path } from 'constants/paths'\n\nexport default {\n  path,\n  component: Loadable({\n    loader: () =>\n      import(/* webpackChunkName: 'Login' */ './components/LoginPage')\n  })\n}\n","import { Loadable } from 'utils/components'\nimport { SIGNUP_PATH as path } from 'constants/paths'\n\nexport default {\n  path,\n  component: Loadable({\n    loader: () =>\n      import(/* webpackChunkName: 'Signup' */ './components/SignupPage')\n  })\n}\n","import { LIST_PATH as path } from 'constants/paths'\nimport { Loadable } from 'utils/components'\n\nexport default {\n  path,\n  component: Loadable({\n    loader: () =>\n      import(/* webpackChunkName: 'Projects' */ './components/ProjectsPage')\n  })\n}\n","import { Loadable } from 'utils/components'\nimport { ACCOUNT_PATH as path } from 'constants/paths'\n\nexport default {\n  path,\n  component: Loadable({\n    loader: () =>\n      import(/* webpackChunkName: 'Account' */ './components/AccountPage')\n  })\n}\n","import Loadable from 'react-loadable'\nimport LoadingSpinner from 'components/LoadingSpinner'\n\nexport default {\n  component: Loadable({\n    loader: () =>\n      import(/* webpackChunkName: 'NotFound' */ './components/NotFoundPage'),\n    loading: LoadingSpinner\n  })\n}\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport CoreLayout from '../layouts/CoreLayout'\nimport Home from './Home'\nimport LoginRoute from './Login'\nimport SignupRoute from './Signup'\nimport ProjectsRoute from './Projects'\nimport AccountRoute from './Account'\nimport NotFoundRoute from './NotFound'\n\nexport default function createRoutes(store) {\n  return (\n    <CoreLayout>\n      <Switch>\n        <Route exact path={Home.path} component={() => <Home.component />} />\n        {/* Build Route components from routeSettings */\n        [\n          AccountRoute,\n          ProjectsRoute,\n          SignupRoute,\n          LoginRoute\n          /* Add More Routes Here */\n        ].map((settings, index) => (\n          <Route key={`Route-${index}`} {...settings} />\n        ))}\n        <Route component={NotFoundRoute.component} />\n      </Switch>\n    </CoreLayout>\n  )\n}\n","// ------------------------------------\n// Constants\n// ------------------------------------\nexport const LOCATION_CHANGE = 'LOCATION_CHANGE'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function locationChange(location = '/') {\n  return {\n    type: LOCATION_CHANGE,\n    payload: location\n  }\n}\n\n// ------------------------------------\n// Specialized Action Creator\n// ------------------------------------\nexport function updateLocation({ dispatch }) {\n  return nextLocation => dispatch(locationChange(nextLocation))\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = null\nexport default function locationReducer(state = initialState, action) {\n  return action.type === LOCATION_CHANGE ? action.payload : state\n}\n","import { combineReducers } from 'redux'\nimport { reducer as firebase } from 'react-redux-firebase'\nimport { reducer as form } from 'redux-form'\nimport { reducer as notifications } from 'modules/notification'\nimport locationReducer from './location'\n\nexport function makeRootReducer(asyncReducers) {\n  return combineReducers({\n    // Add sync reducers here\n    firebase,\n    form,\n    notifications,\n    location: locationReducer,\n    ...asyncReducers\n  })\n}\n\nexport function injectReducer(store, { key, reducer }) {\n  store.asyncReducers[key] = reducer // eslint-disable-line no-param-reassign\n  store.replaceReducer(makeRootReducer(store.asyncReducers))\n}\n\nexport default makeRootReducer\n","/**\n * NOTE: This file is ignored from git tracking. In a CI environment it is\n * generated by firebase-ci based on config in .firebaserc (see .gitlab-ci.yaml).\n * This is done so that environment specific settings can be applied.\n */\n\nexport const env = \"local\";\n\n// Config for firebase\nexport const firebase = {\n  apiKey: \"AIzaSyDUKbaOrbnWtQ-FyilGqBAl4zH7bYWgFQk\",\n  authDomain: \"redux-firebasev3.firebaseapp.com\",\n  databaseURL: \"https://puzzle-editor-982f4.firebaseio.com/\",\n  projectId: \"puzzle-editor-982f4\",\n  storageBucket: \"redux-firebasev3.appspot.com\",\n};\n\n// Config to override default reduxFirebase config in store/createStore\n// which is not environment specific.\n// For more details, visit http://react-redux-firebase.com/docs/api/enhancer.html\nexport const reduxFirebase = {\n  enableLogging: false, // enable/disable Firebase Database Logging\n};\n\nexport default {\n  env,\n  firebase,\n  reduxFirebase,\n};\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport 'firebase/firestore' // make sure you add this for firestore\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase'\nimport { createFirestoreInstance } from 'redux-firestore'\nimport { Provider } from 'react-redux'\nimport ThemeSettings from 'theme'\nimport { firebase as fbConfig, reduxFirebase as rfConfig } from 'config'\n\nconst theme = createMuiTheme(ThemeSettings)\n\n// Initialize Firebase instance\nfirebase.initializeApp(fbConfig)\n\nfunction App({ routes, store }) {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Provider store={store}>\n        <ReactReduxFirebaseProvider\n          firebase={firebase}\n          config={rfConfig}\n          dispatch={store.dispatch}\n          createFirestoreInstance={createFirestoreInstance}>\n          <Router>{routes}</Router>\n        </ReactReduxFirebaseProvider>\n      </Provider>\n    </MuiThemeProvider>\n  )\n}\n\nApp.propTypes = {\n  routes: PropTypes.object.isRequired,\n  store: PropTypes.object.isRequired\n}\n\nexport default App\n","export default {\n  palette: {\n    primary: {\n      main: '#2196f3'\n    }\n  },\n  // Enable typography v2: https://material-ui.com/style/typography/#migration-to-typography-v2\n  typography: {\n    useNextVariants: true\n  },\n  flexColumnCenter: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  flexRowCenter: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  }\n}\n","import App from './App'\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { initScripts } from './utils'\nimport createStore from './store/createStore'\nimport { version } from '../package.json'\nimport { env } from './config'\nimport App from './containers/App'\nimport './index.css'\n\n// import * as serviceWorker from './serviceWorker'\n\n// Window Variables\n// ------------------------------------\nwindow.version = version\nwindow.env = env\ninitScripts()\n\n// Store Initialization\n// ------------------------------------\nconst initialState = window.___INITIAL_STATE__ || {\n  firebase: { authError: null }\n}\nconst store = createStore(initialState)\nconst routes = require('./routes/index').default(store)\n\nReactDOM.render(\n  <App store={store} routes={routes} />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister()\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport { getFirebase } from 'react-redux-firebase'\nimport makeRootReducer from './reducers'\n\nexport default (initialState = {}) => {\n  // ======================================================\n  // Store Enhancers\n  // ======================================================\n  const enhancers = []\n\n  if (window && window.location && window.location.hostname === 'localhost') {\n    const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension())\n    }\n  }\n\n  // ======================================================\n  // Middleware Configuration\n  // ======================================================\n  const middleware = [\n    thunk.withExtraArgument(getFirebase)\n    // This is where you add other middleware like redux-observable\n  ]\n\n  // ======================================================\n  // Store Instantiation and HMR Setup\n  // ======================================================\n  const store = createStore(\n    makeRootReducer(),\n    initialState,\n    compose(\n      applyMiddleware(...middleware),\n      ...enhancers\n    )\n  )\n\n  store.asyncReducers = {}\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const reducers = require('./reducers').default // eslint-disable-line global-require\n      store.replaceReducer(reducers(store.asyncReducers))\n    })\n  }\n\n  return store\n}\n","import {\n  NOTIFICATION_SHOW,\n  NOTIFICATION_DISMISS,\n  NOTIFICATION_CLEAR\n} from './actionTypes'\n\nconst defaultDismissTime = 2500 // 2.5 seconds\n\n/**\n * Publish a notification. if `dismissAfter` is set, the notification will be\n * auto dismissed after the given period.\n * @param {Object} notif - Object containing\n * @param {Object} notif.kind - Kinda of notification (success, warning, failure)\n * @param {Object} notif.message - Notification message\n * @param {Object} notif.dismissAfter - Time after which to dismiss notification (default time set in constants)\n */\nexport function showNotification(notif) {\n  const payload = Object.assign({}, notif)\n  // Set default id to now if none provided\n  if (!payload.id) {\n    payload.id = Date.now()\n  }\n  return dispatch => {\n    dispatch({ type: NOTIFICATION_SHOW, payload })\n\n    setTimeout(() => {\n      dispatch({\n        type: NOTIFICATION_DISMISS,\n        payload: payload.id\n      })\n    }, payload.dismissAfter || defaultDismissTime)\n  }\n}\n\n/**\n * Show message for a success\n * @param {String} message - Message to show\n */\nexport function showSuccess(message) {\n  return showNotification({ type: 'success', message })\n}\n\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\nexport function showError(message) {\n  return showNotification({ type: 'error', message: `Error: ${message || ''}` })\n}\n\n/**\n * Dismiss a notification by the given id.\n * @param {Number} id - notification id\n */\nexport function dismissNotification(payload) {\n  return {\n    type: NOTIFICATION_DISMISS,\n    payload\n  }\n}\n\n/**\n * Clear all notifications\n */\nexport function clearNotifications() {\n  return { type: NOTIFICATION_CLEAR }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from './LoadingSpinner.styles'\n\nconst useStyles = makeStyles(styles)\n\nfunction LoadingSpinner({ size }) {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.progress}>\n        <CircularProgress mode=\"indeterminate\" size={size || 80} />\n      </div>\n    </div>\n  )\n}\n\nLoadingSpinner.propTypes = {\n  size: PropTypes.number\n}\n\nexport default LoadingSpinner\n","export default () => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    paddingTop: '7rem',\n    height: '100%'\n  },\n  progress: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '50%'\n  }\n})\n","import LoadingSpinner from './LoadingSpinner'\n\nexport default LoadingSpinner\n","import { combineReducers } from 'redux'\nimport { without, omit } from 'lodash'\nimport { NOTIFICATION_SHOW, NOTIFICATION_DISMISS } from './actionTypes'\n\nfunction notification(state = {}, action) {\n  switch (action.type) {\n    case NOTIFICATION_SHOW:\n      return action.payload\n    case NOTIFICATION_DISMISS:\n      return undefined\n    default:\n      return state\n  }\n}\n\nfunction allIds(state = [], action) {\n  switch (action.type) {\n    case NOTIFICATION_SHOW:\n      return [...state, action.payload.id]\n    case NOTIFICATION_DISMISS:\n      return without(state, action.payload)\n    default:\n      return state\n  }\n}\n\nfunction byId(state = {}, action) {\n  switch (action.type) {\n    case NOTIFICATION_SHOW:\n      return {\n        ...state,\n        [action.payload.id]: notification(state[action.payload.id], action)\n      }\n    case NOTIFICATION_DISMISS:\n      return omit(state, action.payload)\n    default:\n      return state\n  }\n}\n\nexport const notifications = combineReducers({ byId, allIds })\n\nexport default notifications\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles'\nimport * as actions from '../actions'\n\nconst useStyles = makeStyles(() => ({\n  buttonRoot: {\n    color: 'white'\n  }\n}))\n\nfunction Notifications({ allIds, byId, dismissNotification }) {\n  const classes = useStyles()\n\n  // Only render if notifications exist\n  if (!allIds || !Object.keys(allIds).length) {\n    return null\n  }\n\n  return (\n    <div>\n      {allIds.map(id => (\n        <Snackbar\n          key={id}\n          open\n          action={\n            <IconButton\n              onClick={() => dismissNotification(id)}\n              classes={{ root: classes.buttonRoot }}>\n              <CloseIcon />\n            </IconButton>\n          }\n          message={byId[id].message}\n        />\n      ))}\n    </div>\n  )\n}\n\nNotifications.propTypes = {\n  allIds: PropTypes.array.isRequired,\n  byId: PropTypes.object.isRequired,\n  dismissNotification: PropTypes.func.isRequired\n}\n\nexport default connect(\n  ({ notifications: { allIds, byId } }) => ({ allIds, byId }),\n  actions\n)(Notifications)\n","import * as actions from './actions'\nimport reducer from './reducer'\nimport useNotifications from './components/useNotifications'\nimport Notifications from './components/Notifications'\nimport * as actionTypes from './actionTypes'\n\nexport default actions\nexport { reducer, useNotifications, Notifications, actionTypes }\n"],"sourceRoot":""}