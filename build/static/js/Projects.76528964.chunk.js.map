{"version":3,"sources":["utils/router.js","constants/formNames.js","components/FormTextField/FormTextField.js","components/FormTextField/index.js","utils/form.js","routes/Projects/routes/Project/index.js","routes/Projects/components/ProjectTile/ProjectTile.js","routes/Projects/components/ProjectTile/ProjectTile.styles.js","routes/Projects/components/ProjectTile/index.js","routes/Projects/components/NewProjectTile/NewProjectTile.js","routes/Projects/components/NewProjectTile/NewProjectTile.styles.js","routes/Projects/components/NewProjectTile/index.js","routes/Projects/components/NewProjectDialog/NewProjectDialog.js","routes/Projects/components/NewProjectDialog/NewProjectDialog.styles.js","routes/Projects/components/NewProjectDialog/index.js","routes/Projects/components/NewProjectDialog/NewProjectDialog.enhancer.js","routes/Projects/components/ProjectsPage/ProjectsPage.js","routes/Projects/components/ProjectsPage/ProjectsPage.styles.js","routes/Projects/components/ProjectsPage/ProjectsPage.enhancer.js","routes/Projects/components/ProjectsPage/index.js"],"names":["locationHelper","locationHelperBuilder","history","createBrowserHistory","UserIsAuthenticated","connectedRouterRedirect","redirectPath","AuthenticatingComponent","LoadingSpinner","wrapperDisplayName","authenticatedSelector","auth","firebase","isEmpty","uid","authenticatingSelector","isInitializing","isLoaded","redirectAction","newLoc","dispatch","push","type","payload","message","UserIsNotAuthenticated","allowRedirectBack","state","ownProps","getRedirectQueryParam","LIST_PATH","renderChildren","routes","match","parentProps","map","route","key","url","path","render","props","component","ACCOUNT_FORM_NAME","LOGIN_FORM_NAME","SIGNUP_FORM_NAME","NEW_PROJECT_FORM_NAME","FormTextField","label","input","meta","touched","invalid","error","custom","TextField","placeholder","helperText","required","value","undefined","validateEmail","test","Loadable","loader","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","height","width","margin","spacing","padding","top","justifyContent","name","fontSize","cursor","textDecoration","transition","textOverflow","overflow","whiteSpace","color","ProjectTile","projectId","showDelete","classes","useHistory","useFirebase","useNotifications","showError","showSuccess","Paper","className","onClick","Tooltip","title","IconButton","remove","then","err","console","Promise","reject","defaultProps","flexRowCenter","newIcon","NewProjectTile","inputs","flexColumnCenter","buttons","NewProjectDialog","handleSubmit","open","onRequestClose","Dialog","onClose","DialogTitle","id","onSubmit","DialogContent","Field","validate","DialogActions","Button","enhance","reduxForm","form","onSubmitSuccess","result","reset","paddingTop","flexGrow","boxSizing","overflowY","tiles","flexWrap","ProjectsPage","useSelector","useFirebaseConnect","queryParams","projects","ordered","useState","newDialogOpen","changeDialogState","toggleDialog","addProject","newInstance","createdBy","createdAt","database","ServerValue","TIMESTAMP","useProjects","ProjectRoute","exact","project","ind"],"mappings":"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","file":"static/js/Projects.76528964.chunk.js","sourcesContent":["import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect'\nimport locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper'\nimport { createBrowserHistory } from 'history'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport { LIST_PATH } from 'constants/paths'\n\nconst locationHelper = locationHelperBuilder({})\nconst history = createBrowserHistory()\n\nconst AUTHED_REDIRECT = 'AUTHED_REDIRECT'\nconst UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT'\n\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: '/login',\n  AuthenticatingComponent: LoadingSpinner,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: ({ firebase: { auth } }) =>\n    !auth.isEmpty && !!auth.uid,\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n    !auth.isLoaded || isInitializing,\n  redirectAction: newLoc => dispatch => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc)\n    dispatch({\n      type: UNAUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' }\n    })\n  }\n})\n\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: LoadingSpinner,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: ({ firebase: { auth } }) => auth.isEmpty,\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n    !auth.isLoaded || isInitializing,\n  redirectPath: (state, ownProps) =>\n    locationHelper.getRedirectQueryParam(ownProps) || LIST_PATH,\n  redirectAction: newLoc => dispatch => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc)\n    dispatch({\n      type: AUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' }\n    })\n  }\n})\n\n/**\n * Render children based on route config objects\n * @param {Array} routes - Routes settings array\n * @param {Object} match - Routes settings array\n * @param {Object} parentProps - Props to pass to children from parent\n */\nexport function renderChildren(routes, match, parentProps) {\n  return routes.map(route => (\n    <Route\n      key={`${match.url}-${route.path}`}\n      path={`${match.url}/${route.path}`}\n      render={props => <route.component {...parentProps} {...props} />}\n    />\n  ))\n}\n","export const ACCOUNT_FORM_NAME = 'account'\nexport const LOGIN_FORM_NAME = 'login'\nexport const SIGNUP_FORM_NAME = 'signup'\nexport const NEW_PROJECT_FORM_NAME = 'newProject'\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\n\nfunction FormTextField({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) {\n  return (\n    <TextField\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  )\n}\n\nFormTextField.propTypes = {\n  formTextField: PropTypes.object\n}\n\nexport default FormTextField\n","import FormTextField from './FormTextField'\n\nexport default FormTextField\n","/**\n * Returns error message if value does not exist, otherwise returns\n * undefined\n * @param {string} value - Email to validate\n * @returns {string|undefined} Required string if value is undefined\n * @example <caption>Required Field</caption>\n * <Field\n *   name=\"password\"\n *   component={TextField}\n *   label=\"Password\"\n *   type=\"password\"\n *   validate={required}\n * />\n */\nexport function required(value) {\n  return value ? undefined : 'Required'\n}\n\n/**\n * Returns error message if value is not a valid email, otherwise returns\n * undefined\n * @param {string} value - Email to validate\n * @returns {string|undefined} Required string if value is undefined\n * @example <caption>Basic</caption>\n * <Field\n *   name=\"email\"\n *   component={TextField}\n *   label=\"Email\"\n *   validate={validateEmail}\n * />\n */\nexport function validateEmail(value) {\n  return value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n    ? 'Invalid email address'\n    : undefined\n}\n","import { Loadable } from 'utils/components'\n\nexport default {\n  path: ':projectId',\n  component: Loadable({\n    loader: () =>\n      import(/* webpackChunkName: 'Project' */ './components/ProjectPage')\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useHistory } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useFirebase } from 'react-redux-firebase'\nimport { LIST_PATH } from 'constants/paths'\nimport styles from './ProjectTile.styles'\nimport useNotifications from 'modules/notification/components/useNotifications'\n\nconst useStyles = makeStyles(styles)\n\nfunction ProjectTile({ name, projectId, showDelete }) {\n  const classes = useStyles()\n  const history = useHistory()\n  const firebase = useFirebase()\n  const { showError, showSuccess } = useNotifications()\n  \n  function goToProject() {\n    return history.push(`${LIST_PATH}/${projectId}`)\n  }\n\n  function deleteProject() {\n    return firebase\n      .remove(`projects/${projectId}`)\n      .then(() => showSuccess('Project deleted successfully'))\n      .catch(err => {\n        console.error('Error:', err) // eslint-disable-line no-console\n        showError(err.message || 'Could not delete project')\n        return Promise.reject(err)\n      })\n  }\n  \n  return (\n    <Paper className={classes.root}>\n      <div className={classes.top}>\n        <span className={classes.name} onClick={goToProject}>\n          {name || 'No Name'}\n        </span>\n        {showDelete ? (\n          <Tooltip title=\"delete\">\n            <IconButton onClick={deleteProject}>\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        ) : null}\n      </div>\n    </Paper>\n  )\n}\n\nProjectTile.propTypes = {\n  name: PropTypes.string,\n}\n\nProjectTile.defaultProps = {\n  showDelete: true\n}\n\nexport default ProjectTile\n","export default theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    height: '200px',\n    width: '300px',\n    margin: theme.spacing(0.5),\n    padding: theme.spacing(1.3)\n  },\n  top: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    width: '100%'\n  },\n  name: {\n    fontSize: '1.5rem',\n    cursor: 'pointer',\n    textDecoration: 'none',\n    transition: 'all 800ms cubic-bezier(0.25,0.1,0.25,1) 0ms',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    '&:hover': {\n      color: ''\n    },\n    '&:visited': {\n      textDecoration: 'none'\n    }\n  }\n})\n","import ProjectTile from './ProjectTile'\n\nexport default ProjectTile\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ContentAddCircle from '@material-ui/icons/AddCircle'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from './NewProjectTile.styles'\n\nconst useStyles = makeStyles(styles)\n\nfunction NewProjectTile({ onClick }) {\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.root} onClick={onClick}>\n      <ContentAddCircle className={classes.newIcon} />\n    </Paper>\n  )\n}\n\nNewProjectTile.propTypes = {\n  onClick: PropTypes.func\n}\n\nexport default NewProjectTile\n","export default theme => ({\n  root: {\n    ...theme.flexRowCenter,\n    alignItems: 'center',\n    cursor: 'pointer',\n    height: '200px',\n    width: '300px',\n    margin: theme.spacing(0.5),\n    padding: theme.spacing(1.3),\n    overflow: 'hidden'\n  },\n  newIcon: {\n    width: '6rem',\n    height: '6rem',\n    transition: 'all 800ms cubic-bezier(0.25,0.1,0.25,1) 0ms',\n    '&:hover': {\n      color: '#757575'\n    }\n  }\n})\n","import NewProjectTile from './NewProjectTile'\n\nexport default NewProjectTile\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Field } from 'redux-form'\nimport TextField from 'components/FormTextField'\nimport { required } from 'utils/form'\nimport styles from './NewProjectDialog.styles'\n\nconst useStyles = makeStyles(styles)\n\nfunction NewProjectDialog({ handleSubmit, open, onRequestClose }) {\n  const classes = useStyles()\n\n  return (\n    <Dialog open={open} onClose={onRequestClose}>\n      <DialogTitle id=\"new-project-dialog-title\">New Project</DialogTitle>\n      <form onSubmit={handleSubmit} className={classes.inputs}>\n        <DialogContent>\n          <Field\n            name=\"name\"\n            component={TextField}\n            label=\"Project Name\"\n            validate={[required]}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onRequestClose} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  )\n}\n\nNewProjectDialog.propTypes = {\n  handleSubmit: PropTypes.func.isRequired, // from enhancer (reduxForm)\n  open: PropTypes.bool.isRequired,\n  onRequestClose: PropTypes.func.isRequired\n}\n\nexport default NewProjectDialog\n","export default theme => ({\n  root: {\n    padding: theme.spacing(2)\n  },\n  inputs: {\n    ...theme.flexColumnCenter\n  },\n  buttons: {\n    ...theme.flexColumnCenter\n  }\n})\n","import NewProjectDialog from './NewProjectDialog'\nimport enhance from './NewProjectDialog.enhancer'\n\nexport default enhance(NewProjectDialog)\n","import { reduxForm } from 'redux-form'\nimport { NEW_PROJECT_FORM_NAME } from 'constants/formNames'\n\nexport default reduxForm({\n  form: NEW_PROJECT_FORM_NAME,\n  // Clear the form for future use (creating another project)\n  onSubmitSuccess: (result, dispatch, props) => props.reset()\n})\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { isEmpty, isLoaded } from 'react-redux-firebase'\nimport { Route, Switch } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useSelector } from 'react-redux'\nimport { useFirebase, useFirebaseConnect } from 'react-redux-firebase'\nimport ProjectRoute from 'routes/Projects/routes/Project'\nimport { useNotifications } from 'modules/notification'\nimport { renderChildren } from 'utils/router'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport ProjectTile from '../ProjectTile'\nimport NewProjectTile from '../NewProjectTile'\nimport NewProjectDialog from '../NewProjectDialog'\nimport styles from './ProjectsPage.styles'\n\nconst useStyles = makeStyles(styles)\n\nfunction useProjects() {\n  const { showSuccess, showError } = useNotifications()\n  const firebase = useFirebase()\n  // Get auth from redux state\n  const auth = useSelector(state => state.firebase.auth)\n\n  // Attach todos listener\n  useFirebaseConnect(() => [\n    {\n      path: 'projects',\n      queryParams: ['limitToLast=10']\n      // queryParams: ['orderByChild=createdBy', `equalTo=${auth.uid}`]\n    }\n  ])\n\n  // Get projects from redux state\n  const projects = useSelector(state => state.firebase.ordered.projects)\n  \n  // New dialog\n  const [newDialogOpen, changeDialogState] = useState(false)\n  const toggleDialog = () => changeDialogState(!newDialogOpen)\n\n  function addProject(newInstance) {\n    if (!auth.uid) {\n      return showError('You must be logged in to create a project')\n    }\n    return firebase\n      .push('projects', {\n        ...newInstance,\n        createdBy: auth.uid,\n        createdAt: firebase.database.ServerValue.TIMESTAMP\n      })\n      .then(() => {\n        toggleDialog()\n        showSuccess('Project added successfully')\n      })\n      .catch(err => {\n        console.error('Error:', err) // eslint-disable-line no-console\n        showError(err.message || 'Could not add project')\n        return Promise.reject(err)\n      })\n  }\n\n  return { auth, projects, addProject, newDialogOpen, toggleDialog }\n}\n\nfunction ProjectsPage({ match }) {\n  const classes = useStyles()\n  const {\n    auth,\n    projects,\n    addProject,\n    newDialogOpen,\n    toggleDialog\n  } = useProjects()\n\n\n  // Show spinner while projects are loading\n  if (!isLoaded(projects)) {\n    return <LoadingSpinner />\n  }\n\n  return (\n    <Switch>\n      {/* Child routes */}\n      {renderChildren([ProjectRoute], match, { auth })}\n      {/* Main Route */}\n      <Route\n        exact\n        path={match.path}\n        render={() => (\n          <div className={classes.root}>\n            <NewProjectDialog\n              onSubmit={addProject}\n              open={newDialogOpen}\n              onRequestClose={toggleDialog}\n            />\n            <div className={classes.tiles}>\n              <NewProjectTile onClick={toggleDialog} />\n              {!isEmpty(projects) &&\n                projects.map((project, ind) => {\n                  return (\n                    <ProjectTile\n                      key={`Project-${project.key}-${ind}`}\n                      name={project.value.name}\n                      projectId={project.key}\n                    />\n                  )\n                })}\n            </div>\n          </div>\n        )}\n      />\n    </Switch>\n  )\n}\n\nProjectsPage.propTypes = {\n  match: PropTypes.object.isRequired, // from enhancer (withRouter)\n}\n\nexport default ProjectsPage\n","export default theme => ({\n  root: {\n    ...theme.flexColumnCenter,\n    paddingTop: theme.spacing(4),\n    flexGrow: '2',\n    boxSizing: 'border-box',\n    overflowY: 'scroll'\n  },\n  tiles: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '-webkit-flex-flow': 'row wrap'\n  }\n})\n","import { UserIsAuthenticated } from 'utils/router'\n\n// redirect to /login if user is not logged in\nexport default UserIsAuthenticated\n","import ProjectsPage from './ProjectsPage'\nimport enhance from './ProjectsPage.enhancer'\n\nexport default enhance(ProjectsPage)\n"],"sourceRoot":""}